;; Purpose: An introduction to data design (enumerations) and the design recipe.

(require 2htdp/image)

;;! Instructions:
;;! 1. Read the contents of this file, and fill in [TODO] items that appear
;;!    below.
;;! 2. Do not create, modify or delete any line that begins with ";;!", such
;;!    as these lines. These are markers that we use to segment your file into
;;!    parts to facilitate grading.
;;! 3. You must follow the _design recipe_ for every problem. In particular,
;;!    every function you define must have at least three check-expects (and
;;!    more if needed).

;;! Problem 1

;; The weather is cooling down in Boston, but over the summer, you noticed a lot
;; of kids selling lemonade at little stands. You noticed two that were next to
;; each other that had different pricing and different materials. You were
;; curious which strategy would work better, so in this problem you will model
;; both stands.

;;! Part A

;; The first stand was getting 16 fluid ounce bottles of lemonade from a shop
;; right around the corner, for $2/each, and was selling 4 fluid ounce cups for
;; $1/each. For simplicity, we'll ignore the cost of the cups, refridgeration,
;; etc, and you can assume the corner shop never runs out of 16 fluid ounce bottles.
;;
;; Define a function "lemonade-stand-1" that takes a number of cups sold as
;; input and returns the total profit. Be sure to take into account that the 16
;; fluid ounce bottles cannot be purchased in part, so there may be extra left
;; over! Hint: the functions `remainder` or `modulo` may be useful.

;; [TODO] Function definition

(define (lemonade-stand-1 cups-sold)
 (define total-ounces (* cups-sold 4)) 
 (define full-bottles (quotient total-ounces 16)) 
 (define leftover-ounces (remainder total-ounces 16)) 
 (define bottles-needed(if (> leftover-ounces 0) (+ full-bottles 1) full-bottles)) 
 (- (* cups-sold 1) 
(* bottles-needed 2))) 

(lemonade-stand-1 0)
(lemonade-stand-1 4)
(lemonade-stand-1 10)
(lemonade-stand-1 16)

;;! Part B

;; The second stand decided to buy the lemonade in bulk, getting a gigantic 5
;; gallon (640 fluid ounce) container for $20. To try to undercut the other
;; stand, they decided to sell their 4 fluid ounce cups for $0.75 each. But,
;; since they bought their lemonade from a store that is far from home, when
;; they run out, they will stop being able to sell lemonade.
;;
;; Define a function "lemonade-stand-2" that takes a number of cups (attempted
;; to be) sold as input and returns the total profit. Note that this input may
;; be any positive integer, so if it exceeds their capacity, the function should
;; simply return their profit before they closed the stand. Note that if they
;; sell the entirety of their lemonade, there is no penalty for being unable to
;; sell additional cups. As before, we aren't considering cost of cups,
;; refridgeration, etc.


;; [TODO] Function definition

(define (lemonade-stand-2 cups-sold) (define max-cups 160)
 (define cups-actually-sold (min cups-sold max-cups)) 
 (define revenue (* cups-actually-sold 0.75)) 
 (define cost 20) 
 (- revenue cost))

(lemonade-stand-2 10) 
(lemonade-stand-2 50) 
(lemonade-stand-2 100) 

;;! Part C

;; Now, you'd like to define a function `which-stand-better` that, given a
;; number of cups sold, returns the number 1 if lemonade stand 1 would make more
;; money at that number of cups, or 2 if lemonade stand 2 would make more money
;; with that number of cups sold. If they are tied, return 0.

;; [TODO] Function definition

(define (which-stand-better cups-sold)
  (define profit-stand-1 (lemonade-stand-1 cups-sold)) 
  (define profit-stand-2 (lemonade-stand-2 cups-sold)) 
  (cond
     [(> profit-stand-1 profit-stand-2) 1] 
     [(> profit-stand-2 profit-stand-1) 2] 
     [else 0]))                         

(which-stand-better 50) 
(which-stand-better 100) 
(which-stand-better 200)

;;! Part D

;; Now use `which-stand-better` (and your other two functions) to investigate
;; the two strategies. Describe, in words, how the two compare. Is one strictly
;; better than the other? Does it depend on something?

;; [TODO] Prose explanation

In the strategy for Stand 2, 5 gallons equals 640 fluid ounces. Each cup of lemonade is 4 fluid ounces, meaning the total maximum number of cups that can be sold is 640 ÷ 4 = 160 cups. Use which-stand-better for several times,sepeatedly substitute numbers for both less than and more than 160 cups. Considering the initial $20 cost for the container and lemonade in Stand 2’s strategy, when the number of cups sold is small, Stand 1’s strategy has the advantage. However, once 160 cups are reached, Stand 2 breaks even, while Stand 1 continues to incur an additional $1 in cost for every 2 cups sold. Therefore, after reaching 160 cups, Stand 2’s strategy becomes more advantageous.

;;! Problem 2

;;! Part A

;; Boston has 23 named neighborhoods, as described on this web page:
;; https://en.wikipedia.org/wiki/Neighborhoods_in_Boston
;; Please choose 5 of them and design a data definition called Neighborhood
;; that can represent any of the 5 neighborhoods that you have chosen.
;; Note: name your template neighborhood-template.

;; [TODO]

(define (Neighborhood-template nbhd)
  (cond
    [(string=? “Fenway” nbhd) ...]
    [(string=? “Back bay" nbhd) ...]
    [(string=? “Allston” nbhd) ...]
    [(string=? “Downtown” nbhd) ...]
    [(string=? “Roxbury” nbhd) ...]))


;;! Part B

;; One way to classify neighborhoods is using statistical information. The city
;; collects information about residents in each neighborhood and publishes it
;; at https://data.boston.gov/dataset/neighborhood-demographics/resource/7154cc09-55c4-4acd-99a5-3a233d11e699
;; We want to focus on the 2000 data set. Note that the neighborhood list has slightly
;; changed since then, so if any of your five chosen neighborhoods don't appear in this list,
;; or appear under different names, please update your data definition to include only
;; neighborhoods from this list.

;; Design a predicate, `family-friendly?`, that returns #t if
;; the percentage of people under 9 years old is above 10% -- as those are the
;; neighborhoods with lots of families with small kids.
;; [TODO]

(struct demographics (name percentage-under-9))

(define fenway-data (make-demographics "Fenway" 1.0))
(define back-bay-data (make-demographics "Back Bay" 3.0))
(define allston-data (make-demographics "Allston" 5.0))
(define downtown-data (make-demographics "Downtown" 5.0))
(define roxbury-data (make-demographics "Roxbury" 17.0))

(define demographics-list
  (list fenway-data back-bay-data allston-data downtown-data roxbury-data))

(define (family-friendly? demo)
  (> (demographics-percentage-under-9 demo) 10))

(family-friendly? fenway-data)    ; returns #f 
(family-friendly? back-bay-data)  ; returns #f 
(family-friendly? roxbury-data)   ; returns #t 

;;! Part C
;;
;; INTERPRETIVE QUESTION:
;;
;; While this predicate captures neighborhoods that have _many_ children, mere
;; numbers do not necessarily convey how "friendly" a neighborhood is to
;; families. Write 2-3 sentences about factors that, as the City, you might want
;; to include if you were to publish a list of "family friendly neighborhoods"
;; beyond just the percentage used above.

;; [TODO]

Perhaps public safety, medical resources, access to transportation lines, green space coverage, and school districts would all be factors that influence family-friendliness.

;;! Part D

;; How should you draw a Neighborhood? Design a function `draw-neighborhood` that takes
;; a Neighborhood and returns an Image representation of it. As is often the case, we need
;; to understand how the result may be used before we can figure out how to design this.
;; Does it need to be geographically accurate? If it will be used for mapping, and we were
;; planning on adding streets, etc, then clearly yes! But if we were planning, instead, to use
;; the result for data visualization, simple abstractions might be okay. Another question
;; you should ask: should the sizes be correct relative to one another? Some neighborhoods are
;; much bigger than others: does the image need to convey this scale accurately? Perhaps the
;; size of a neighborhood will be something that the user should be able to control, as
;; certain visualizations may display neighborhoods scaled to convey information.
;;
;; We would like you to make some decisions, reflected in your purpose
;; statements. Define a purpose and use case for 'draw-neighborhood'.
;; Each decision you make should be justified with a reason why that relates
;; to the purpose of the function. You are welcome to use simplified drawings, but justify why.

;; [TODO]

(define (draw-neighborhood nbhd)
  (cond
    [(string=? "Fenway" nbhd)
     (draw-simple-neighborhood "Fenway" 1.0)]
    [(string=? "Back Bay" nbhd)
     (draw-simple-neighborhood "Back Bay" 3.0)]
    [(string=? "Allston" nbhd)
     (draw-simple-neighborhood "Allston" 5.0)]
    [(string=? "Downtown" nbhd)
     (draw-simple-neighborhood "Downtown" 5.0)]
    [(string=? "Roxbury" nbhd)
     (draw-simple-neighborhood "Roxbury" 17.0)]
    [else "Other Neighborhood"]))

(define (draw-simple-neighborhood name percent-under-9)
  (if (> percent-under-9 10)
      (string-append name ": Family-friendly (Children under 9 > 10%)")
      (string-append name ": Not-family-friendly (Children under 9 <= 10%)")))

(draw-neighborhood "Fenway"); Not-family-friendly
(draw-neighborhood "Back Bay"); Not-family-friendly
(draw-neighborhood "Roxbury"); Family-friendly

;;! Part E

;; Now we can draw single neighborhoods, but individually, these images don't tell us much. Design
;; a function `draw-three-neighborhoods` that takes three neighborhoods and returns an image
;; of all three in relation to one another. Use color to distinguish the three neighborhoods.
;; Consider how it would be helpful to use or revise previous functions.

;; [TODO]

(define (draw-neighborhood nbhd color)
  (cond
    [(string=? "Fenway" nbhd)
     (draw-simple-neighborhood "Fenway" 1.0 color)]
    [(string=? "Back Bay" nbhd)
     (draw-simple-neighborhood "Back Bay" 3.0 color)]
    [(string=? "Allston" nbhd)
     (draw-simple-neighborhood "Allston" 5.0 color)]
    [(string=? "Downtown" nbhd)
     (draw-simple-neighborhood "Downtown" 5.0 color)]
    [(string=? "Roxbury" nbhd)
     (draw-simple-neighborhood "Roxbury" 17.0 color)]
    [else "Other Neighborhood"]))

stucked and no idea at all
